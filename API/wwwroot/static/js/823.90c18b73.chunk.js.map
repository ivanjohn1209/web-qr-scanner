{"version":3,"file":"static/js/823.90c18b73.chunk.js","mappings":"wNAoEA,UA/DA,WACE,OAAwBA,EAAAA,EAAAA,UAAS,CAC/BC,SAAU,GACVC,OAAQ,GACRC,KAAM,GACNC,GAAI,KAJN,eAAOC,EAAP,KAAaC,EAAb,KAMMC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,cAEP,IAEH,IAAMC,EAAS,mCAAG,WAAOC,GAAP,yFAKUC,MAAM,gDAAiD,CAC/EC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEd,KAAMQ,MAXf,cAKVO,EALU,gBAaMA,EAAYC,OAblB,OAaVC,EAbU,OAchBd,EAAQc,GACRC,MAAM,YAfU,2CAAH,sDAqBf,OACE,iBAAKC,UAAU,YAAf,WACE,eAAIC,MAAO,CAAEC,UAAW,UAAxB,yBACA,gBAAKD,MAAO,CAAEE,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UAArE,UACE,gBAAKJ,MAAO,CAAEK,OAAQ,IAAKC,MAAO,KAAlC,UACE,SAAC,IAAD,CAEEC,SAAU,SAACC,EAAQC,GACXD,GACJrB,EAAS,OAACqB,QAAD,IAACA,OAAD,EAACA,EAAQE,KAAM5B,IAM5BkB,MAAO,CAAEM,MAAO,eAItB,eAAGN,MAAO,CAAEC,UAAW,UAAvB,mBAA0CnB,EAAKJ,aAC/C,gBAAKqB,UAAU,2BAAf,UACE,SAAC,IAAD,CAAQY,KAAK,UAAb,qBAEF,gBAAKZ,UAAU,sBAAf,UACE,SAAC,IAAD,CAAQY,KAAK,UAAUC,QA3BR,WACnB5B,EAAS,qBA0BL","sources":["home/QrScanner.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { QrReader } from 'react-qr-reader';\r\nimport { useState } from 'react';\r\nimport { Button } from 'antd';\r\nimport { useNavigate } from 'react-router-dom';\r\nfunction QrScanner() {\r\n  const [data, setData] = useState({\r\n    lastName: \"\",\r\n    gender: \"\",\r\n    qrId: \"\",\r\n    id: \"\"\r\n  });\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    // setQrData(\"DDN601F44131\")\r\n  }, [])\r\n\r\n  const setQrData = async (qrNum) => {\r\n    // let studentQR = dataStudent.qrId;\r\n    // console.log(qrNum.toString() === studentQR.toString())\r\n    //  if(qrNum.toString() === studentQR.toString())\r\n    //     return false;\r\n    const rawResponse = await fetch('https://localhost:5001/api/qrscanner/check-qr', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ qrId: qrNum })\r\n    });\r\n    const newData = await rawResponse.json();\r\n    setData(newData)\r\n    alert(\"Scanned!\")\r\n  }\r\n\r\n  const onRegisterQr = () => {\r\n    navigate(\"register-student\");\r\n  }\r\n  return (\r\n    <div className='container'>\r\n      <h1 style={{ textAlign: \"center\" }}>QR Scanner</h1>\r\n      <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: 'center' }}>\r\n        <div style={{ height: 500, width: 500 }}>\r\n          <QrReader\r\n\r\n            onResult={(result, error) => {\r\n              if (!!result) {\r\n                setQrData(result?.text, data);\r\n              }\r\n              if (!!error) {\r\n                // console.info(error);\r\n              }\r\n            }}\r\n            style={{ width: '100%' }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <p style={{ textAlign: \"center\" }}>Name: {data.lastName}</p>\r\n      <div className='cs-inline jc-center p-15'>\r\n        <Button type='primary'>Scan</Button>\r\n      </div>\r\n      <div className='cs-inline jc-center'>\r\n        <Button type='primary' onClick={onRegisterQr}>Register Qr</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QrScanner"],"names":["useState","lastName","gender","qrId","id","data","setData","navigate","useNavigate","useEffect","setQrData","qrNum","fetch","method","headers","body","JSON","stringify","rawResponse","json","newData","alert","className","style","textAlign","display","alignItems","justifyContent","height","width","onResult","result","error","text","type","onClick"],"sourceRoot":""}